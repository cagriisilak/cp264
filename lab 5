/**
 * -------------------------------------
 * @file  queue_linked.c
 * Linked Queue Source Code File
 * -------------------------------------
 * @author Cagri Isilak, 210764050, isil4050@mylaurier.ca
 *
 * @version 2023-10-08
 *
 * -------------------------------------
 */
// Includes
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "queue_linked.h"

// Functions

// Initializes a queue.
void queue_initialize(queue_linked_struct **queue, data_type_copy copy, data_type_string to_string,
        data_type_destroy destroy) {

    (*queue) = malloc(sizeof(queue_linked_struct));
    assert((*queue) != NULL);
    (*queue)->front = NULL;
    (*queue)->rear = NULL;
    (*queue)->count = 0;
    (*queue)->copy = copy;
    (*queue)->to_string = to_string;
    (*queue)->destroy = destroy;

}

// Destroys a queue.
void queue_destroy(queue_linked_struct **source) {

    while ((*source)->front != NULL) {
        queue_node *temp = (*source)->front;
        (*source)->front = (*source)->front->next;
        (*source)->destroy(&(temp->item));
        free(temp);
        temp = NULL;
    }

    free(*source);
    *source = NULL;

}

// Determines if a queue is empty.
bool queue_empty(const queue_linked_struct *source) {

	return (source->front == NULL);

}

// Determines if a queue is full.
bool queue_full(const queue_linked_struct *source) {

    return false;

}

// Returns number of items in queue.
int queue_count(const queue_linked_struct *source) {

	return source->count;

}

// Inserts a copy of an item into a queue.
bool queue_insert(queue_linked_struct *source, const data_type *item) {

    queue_node *node = malloc(sizeof(queue_node));
    if (node == NULL) {
        return false;
    }
    node->item = malloc(sizeof(data_type));
    if (node->item == NULL) {
        free(node);
        return false;
    }
    source->copy(node->item, item);
    node->next = NULL;

    if (source->rear == NULL) {
        source->front = node;
        source->rear = node;
    } else {
        source->rear->next = node;
        source->rear = node;
    }

    source->count++;

    return true;

}

// Returns a copy of the item at the front of a queue, queue is unchanged.
bool queue_peek(const queue_linked_struct *source, data_type *item) {

    if (source->front == NULL) {
        return false;
    }
    source->copy(item, source->front->item);
    return true;

}

// Removes and returns the item at the front of a queue.
bool queue_remove(queue_linked_struct *source, data_type *item) {

    if (source->front == NULL) {
        return false;
    }
    queue_node *temp = source->front;
    source->front = source->front->next;
    source->count--;
    if (source->front == NULL) {
        source->rear = NULL;
    }
    source->copy(item, temp->item);
    source->destroy(&(temp->item));
    free(temp);
    temp = NULL;

    return true;

}

// Prints the items in a queue from front to rear.
void queue_print(const queue_linked_struct *source) {
    char string[DATA_STRING_SIZE];
    queue_node *current = source->front;

    while(current != NULL) {
        printf("%s\n", source->to_string(string, DATA_STRING_SIZE, current->item));
        current = current->next;
    }
    return;
}

static void queue_move_node(queue_linked_struct *target, queue_linked_struct *source) {
    if (source->front != NULL) {
        queue_node *temp = source->front;
        source->front = source->front->next;
        if (source->front == NULL) {
            source->rear = NULL;
        }
        temp->next = NULL;
        if (target->rear == NULL) {
            target->front = temp;
            target->rear = temp;
        } else {
            target->rear->next = temp;
            target->rear = temp;
        }
        target->count++;
        source->count--;
    }
}

// Combines contents of two source queues into a target queue. Items alternate.
void queue_combine(queue_linked_struct *target, queue_linked_struct *source1, queue_linked_struct *source2) {

    while (source1->front != NULL || source2->front != NULL) {
        queue_move_node(target, source1);
        queue_move_node(target, source2);

}}

// Splits a source queue alternately into two target queues.  Items alternate.
void queue_split_alt(queue_linked_struct *target1, queue_linked_struct *target2, queue_linked_struct *source) {

    bool left = true;

    while (source->front != NULL) {
        if (left) {
            queue_move_node(target1, source);
        } else {
            queue_move_node(target2, source);
        }
        left = !left;

}}

