/**
 * -------------------------------------
 * @file  list_dynamic.c
 * Dynamic List Source Code File
 * -------------------------------------
 * @Cagri Isilak, 210764050, isil4050@mylaurier.ca
 *
 * @version 2023-10-20
 *
 * -------------------------------------
 */
#include "list_dynamic.h"

// Private helper functions

/**
 * Determines if an index is valid.
 *
 * @param list - pointer to a list.
 * @param i - index to check
 * @return - true if i is a valid index, false otherwise
 */
static bool valid_index(const list_dynamic_struct *source, int i) {
    return ((i >= 0) && (i <= source->count));
}

/**
 * Performs a linear search on source->items for key.
 *
 * @param list - pointer to a list.
 * @param key - key of item to look for in list.
 * @return - index of location of key in list, -1 if key not in list.
 */
static int list_linear_search(const list_dynamic_struct *source, const data_type *key) {

    for (int i = 0; i < source->count; ++i) {
        if (EQUALS(&(source->items[i]), key)) {
            return i;
        }
    }
    return -1;

}

// Functions

// Initializes a list.
void list_initialize(list_dynamic_struct **source, data_type_copy copy, data_type_string to_string,
        data_type_compare compare) {

    *source = (list_dynamic_struct *) malloc(sizeof(list_dynamic_struct));
    if (*source == NULL) {
        exit(EXIT_FAILURE); // handle memory allocation failure
    }
    (*source)->capacity = LIST_INIT;
    (*source)->count = 0;
    (*source)->items = (data_type *) malloc(sizeof(data_type) * LIST_INIT);
    if ((*source)->items == NULL) {
        free(*source);
        exit(EXIT_FAILURE); // handle memory allocation failure
    }
    (*source)->to_string = to_string;
    (*source)->copy = copy;
    (*source)->compare = compare;

}

// Destroys a list.
void list_destroy(list_dynamic_struct **source) {

    free((*source)->items);
    free(*source);
    *source = NULL;

}

// Determines if a list is empty.
bool list_empty(const list_dynamic_struct *source) {

	return (source->count == 0);

}

// Determines if the list is full.
bool list_full(const list_dynamic_struct *source) {

	return (source->count == source->capacity);

}

// Appends a item to the end of a list.
bool list_append(list_dynamic_struct *source, data_type *item) {

    if (list_full(source)) {
        return false;
    }
    source->copy(&(source->items[source->count]), item);
    source->count++;
    return true;

}

// Returns the number of items in the list.
int list_count(const list_dynamic_struct *source) {

	return source->count;

}

// Inserts a item to a list at location i.
bool list_insert(list_dynamic_struct *source, data_type *item, int i) {

    if (!valid_index(source, i) || list_full(source)) {
        return false;
    }

    for (int j = source->count; j > i; j--) {
        source->copy(&(source->items[j]), &(source->items[j - 1]));
    }

    source->copy(&(source->items[i]), item);
    source->count++;
    return true;

}

// Returns a copy of the front of a list.
bool list_peek(const list_dynamic_struct *source, data_type *item) {

    if (list_empty(source)) {
        return false;
    }
    source->copy(item, &(source->items[0]));
    return true;

}

// Returns a copy of the item matching key in a list.
bool list_key_find(const list_dynamic_struct *source, const data_type *key, data_type *item) {

    int index = list_linear_search(source, key);
    if (index != -1) {
        source->copy(item, &(source->items[index]));
        return true;
    }
    return false;

}

// Removes and returns the item matching key from the list.
bool list_key_remove(list_dynamic_struct *source, const data_type *key, data_type *item) {

    int index = list_linear_search(source, key);
    if (index != -1) {
        source->copy(item, &(source->items[index]));
        // Shift elements to the left to fill the gap
        for (int i = index; i < source->count - 1; ++i) {
            source->copy(&(source->items[i]), &(source->items[i + 1]));
        }
        source->count--;
        return true;
    }
    return false;

}

// Returns the index of key in list. -1 if key not in list.
int list_key_index(const list_dynamic_struct *source, const data_type *key) {

	return list_linear_search(source, key);

}

// Determines if key is in a list.
bool list_key_contains(const list_dynamic_struct *source, const data_type *key) {

	return (list_linear_search(source, key) != -1);

}

// Determines number of times key appears in list.
int list_key_count(const list_dynamic_struct *source, const data_type *key) {

    int count = 0;
    for (int i = 0; i < source->count; ++i) {
        if (EQUALS(&(source->items[i]), key)) {
            count++;
        }
    }
    return count;

}

// Removes and returns the item at index i from a list.
bool list_index_remove(list_dynamic_struct *source, data_type *item, int i) {

    if (!valid_index(source, i) || list_empty(source)) {
        return false;
    }

    source->copy(item, &(source->items[i]));
    // Shift elements to the left to fill the gap
    for (int j = i; j < source->count - 1; ++j) {
        source->copy(&(source->items[j]), &(source->items[j + 1]));
    }
    source->count--;
    return true;

}

// Finds the maximum item in a list.
bool list_max(const list_dynamic_struct *source, data_type *item) {

    if (list_empty(source)) {
        return false;
    }
    source->copy(item, &(source->items[0]));
    for (int i = 1; i < source->count; ++i) {
        if (GREATER(&(source->items[i]), item)) {
            source->copy(item, &(source->items[i]));
        }
    }
    return true;

}

// Finds the minimum item in a list.
bool list_min(const list_dynamic_struct *source, data_type *item) {

    if (list_empty(source)) {
        return false;
    }
    source->copy(item, &(source->items[0]));
    for (int i = 1; i < source->count; ++i) {
        if (LESSER(&(source->items[i]), item)) {
            source->copy(item, &(source->items[i]));
        }
    }
    return true;

}

// Removes all duplicate items from a list.
void list_clean(list_dynamic_struct *source) {

    for (int i = 0; i < source->count - 1; ++i) {
        for (int j = i + 1; j < source->count; ++j) {
            if (EQUALS(&(source->items[i]), &(source->items[j]))) {
                list_index_remove(source, NULL, j);
                j--; // recheck the current index in case items are still duplicates
            }
        }
    }
}

// Compares two lists for equality.
bool list_equal(const list_dynamic_struct *target, const list_dynamic_struct *source) {

    if (target->count != source->count) {
        return false;
    }
    for (int i = 0; i < target->count; ++i) {
        if (NOT(&(target->items[i]), &(source->items[i]))) {
            return false;
        }
    }
    return true;

}

// Prints the items in a list from front to rear.
void list_print(const list_dynamic_struct *source) {
    char string[DATA_STRING_SIZE];
    printf("  capacity: %d, count: %d, items:\n", source->capacity, source->count);
    // Walk through pq using indexes.
    for(int i = 0; i < source->count; i++) {
        printf("%s\n", source->to_string(string, DATA_STRING_SIZE, &(source->items[i])));
    }
    return;
}
