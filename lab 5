/**
 * -------------------------------------
 * @file  max_heap_dynamic_struct_dynamic.c
 * Dynamic Maximum Heap Source Code File
 * -------------------------------------
 * @author name, id, email
 *
 * @version 2023-10-31
 *
 * -------------------------------------
 */
#include "max_heap_dynamic.h"

// Macros

// local functions

/**
 * Swaps items in two data_type pointers.
 *
 * @param a - pointer to an array item
 * @param b - pointer to an array item
 */
static void heap_swap(data_type *a, data_type *b) {
    data_type temp = *a;
    *a = *b;
    *b = temp;
    return;
}

/**
 * Moves a item from index count-1 up the heap to its correct position.
 * Compares this item with its parent and swaps their positions
 * until its parent's value is greater than or equal to its value.
 *
 * @param source - pointer to a maximum heap
 */
static void heapify_up(max_heap_dynamic_struct *source) {

    int index = source->count - 1;

    while (index > 0) {
        int parent_index = (index - 1) / 2;
        if (source->compare(&(source->items[index]), &(source->items[parent_index])) > 0) {
            heap_swap(&(source->items[index]), &(source->items[parent_index]));
            index = parent_index;
        } else {
            break;
        }
    }

    return;
}

/**
 * Moves a item from index 0 down the heap to its correct position.
 * Compares this item with its children and swaps locations with its
 * child with the largest value until its value is greater than or
 * equal to the value of its largest child.
 *
 * @param source - pointer to a maximum heap
 */
static void heapify_down(max_heap_dynamic_struct *source) {

    int index = 0;

    while (2 * index + 1 < source->count) {
        int left_child_index = 2 * index + 1;
        int right_child_index = 2 * index + 2;
        int largest_child_index = left_child_index;

        if (right_child_index < source->count &&
            source->compare(&(source->items[right_child_index]), &(source->items[left_child_index])) > 0) {
            largest_child_index = right_child_index;
        }

        if (source->compare(&(source->items[largest_child_index]), &(source->items[index])) > 0) {
            heap_swap(&(source->items[largest_child_index]), &(source->items[index]));
            index = largest_child_index;
        } else {
            break;
        }
    }

    return;
}

// Initializes a maximum heap.
void max_heap_initialize(max_heap_dynamic_struct **source, data_type_copy copy, data_type_string to_string,
        data_type_compare compare) {
    *source = malloc(sizeof **source);
    assert((*source) != NULL);
    (*source)->capacity = HEAP_INIT;
    (*source)->items = malloc(HEAP_INIT * sizeof(*source)->items);
    assert((*source)->items != NULL);
    (*source)->count = 0;
    (*source)->copy = copy;
    (*source)->to_string = to_string;
    (*source)->compare = compare;
    return;
}

// Destroys a maximum heap.
void max_heap_destroy(max_heap_dynamic_struct **source) {

    free((*source)->items);
    free(*source);
    *source = NULL;

    return;
}

// Create a maximum heap from an array of items.
void max_heap_heapify(max_heap_dynamic_struct *source, data_type keys[], int size) {

    for (int i = 0; i < size; i++) {
        max_heap_insert(source, &keys[i]);
    }

    return;
}

// Determines if a maximum heap is empty.
bool max_heap_empty(const max_heap_dynamic_struct *source) {

    return source->count==0;
}

// Determines if a maximum heap is full.
bool max_heap_full(const max_heap_dynamic_struct *source) {

	return source->count == source->capacity;
}

// Returns the number of items in a maximum heap.
int max_heap_count(const max_heap_dynamic_struct *source) {

	return source->count;
}

// Inserts an item into a maximum heap.
bool max_heap_insert(max_heap_dynamic_struct *source, const data_type *item) {

    if (max_heap_full(source)) {
        source->capacity *= 2;
        source->items = realloc(source->items, source->capacity * sizeof(*(source->items)));
        assert(source->items != NULL);
    }

    source->copy(&(source->items[source->count]), item);
    source->count++;
    heapify_up(source);

    return true;
}

// Returns a copy of the item at the root of a maximum heap, the heap is unchanged.
bool max_heap_peek(const max_heap_dynamic_struct *source, data_type *item) {

    if (max_heap_empty(source)) {
        return false;
    }

    source->copy(item, &(source->items[0]));

    return true;
}

// Returns and removes the root item of a maximum heap.
bool max_heap_remove(max_heap_dynamic_struct *source, data_type *item) {

    if (max_heap_empty(source)) {
        return false;
    }

    source->copy(item, &(source->items[0]));
    source->count--;

    if (!max_heap_empty(source)) {
        source->copy(&(source->items[0]), &(source->items[source->count]));
        heapify_down(source);
    }

    return true;
}

// Determines if a maximum heap is valid.
bool max_heap_valid(const max_heap_dynamic_struct *source) {

    for (int i = 1; i < source->count; i++) {
        int parent_index = (i - 1) / 2;
        if (source->compare(&(source->items[i]), &(source->items[parent_index])) > 0) {
            return false;
        }
    }

    return true;
}

// Remove the largest item from a maximum heap and inserts a new item.
bool max_heap_replace(max_heap_dynamic_struct *source, data_type *replacement, data_type *largest) {

    if (max_heap_empty(source)) {
        return false;
    }

    source->copy(largest, &(source->items[0]));
    source->copy(&(source->items[0]), replacement);
    heapify_down(source);

    return true;
}

// Prints the items in a maximum heap from root in levelorder.
void max_heap_print(const max_heap_dynamic_struct *source) {
    char string[DATA_STRING_SIZE];
    printf("  capacity: %d, count: %d, items:\n", source->capacity, source->count);
    // Walk through source using indexes.
    for(int i = 0; i < source->count; i++) {
        printf("%s\n", source->to_string(string, DATA_STRING_SIZE, &(source->items[i])));
    }
    return;
}
