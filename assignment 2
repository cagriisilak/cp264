/**
 * -------------------------------------
 * @file  food_utilities.c
 * food_utilities Source Code File
 * -------------------------------------
 * @Cagri Isilak, 210764050, isil4050@mylaurier.ca
 *
 * @version 2023-09-21
 *
 * -------------------------------------
 */
#include "food_utilities.h"

void food_get(food_struct *food) {
    printf("Enter food name: ");
    scanf("%s", food->name);

    int originIndex;
    origins_menu();
    printf("Enter origin index: ");
    scanf("%d", &originIndex);
    food->origin = originIndex;

    printf("Is it vegetarian? (true/false): ");
    char isVegetarian[6];
    scanf("%s", isVegetarian);
    if (strcmp(isVegetarian, "true") == 0) {
        food->is_vegetarian = true;
    } else {
        food->is_vegetarian = false;
    }

    printf("Enter calories: ");
    scanf("%d", &food->calories);
}

void food_read(food_struct *food, char *line) {
    char delimiters[] = ",";
    char *token = strtok(line, delimiters);
    strcpy(food->name, token);

    token = strtok(NULL, delimiters);
    food->origin = atoi(token);

    token = strtok(NULL, delimiters);
    if (strcmp(token, "true") == 0) {
        food->is_vegetarian = true;
    } else {
        food->is_vegetarian = false;
    }

    token = strtok(NULL, delimiters);
    food->calories = atoi(token);
}

void foods_read(FILE *fp, food_array *foods) {
    char line[LINE_LENGTH];
    foods->count = 0;
    while (fgets(line, LINE_LENGTH, fp) != NULL) {
        food_read(&(foods->items[foods->count]), line);
        foods->count++;
    }
}

void food_write(FILE *fp, const food_struct *food) {
    fprintf(fp, "%s,%d,%s,%d\n", food->name, food->origin, BOOL_TO_STR(food->is_vegetarian), food->calories);
}

void foods_write(FILE *fp, const food_array *foods) {
    for (int i = 0; i < foods->count; i++) {
        food_write(fp, &(foods->items[i]));
    }
}

void foods_get_vegetarian(const food_array *const source, food_array *target) {
    target->count = 0;
    for (int i = 0; i < source->count; i++) {
        if (source->items[i].is_vegetarian) {
            food_copy(&(target->items[target->count]), &(source->items[i]));
            target->count++;
        }
    }
}

void foods_get_origin(const food_array *const source, food_array *target, int origin) {
    target->count = 0;
    for (int i = 0; i < source->count; i++) {
        if (source->items[i].origin == origin) {
            food_copy(&(target->items[target->count]), &(source->items[i]));
            target->count++;
        }
    }
}
